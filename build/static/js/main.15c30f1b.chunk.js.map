{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Profile","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","changeName","setState","name","state","age","_this2","react_default","a","createElement","Fragment","type","onClick","src","style","width","React","Component","App","_useState","useState","_useState2","slicedToArray","title","setTitle","_useState3","_useState4","good","setGood","_useState5","_useState6","modal","setModal","_useState7","_useState8","modalTitle","setModalTitle","_useState9","_useState10","inputData","setInputData","className","copy","toConsumableArray","changeTitle","tList","sort","map","i","key","e","stopPropagation","cursor","num","gList","splice","delItem","props","background","backgroundColor","id","onChange","target","value","concat","inputText","document","getElementById","focus","addItem","App_Profile","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.15c30f1b.chunk.js","sourcesContent":["// 경고 잠시 끄기\r\n/* eslint-disable */\r\n\r\nimport React, { useState } from \"react\";\r\nimport \"./App.css\";\r\n\r\n// react (웹 앱 프레임워크)\r\n// 장) 앱 발행이 쉬움\r\n// 뛰어난 UX (빠른 느낌)\r\n// 단) 문법이 어려움\r\n//\r\n\r\nfunction App() {\r\n    // 일반 변수\r\n    let [name, age] = [\"가나다\", 20];\r\n    let mainTitle = \"개발 blog??\";\r\n\r\n    // let [a, b] = useState(\"ㅁㄴㅇㄴ\");\r\n    // a는 'ㅁㄴㅇㄹ' 같은 데이터가, b에는 state 변경을 도와주는 함수가 들어간다.\r\n    // state를 쓰는 이유는 변수에 변경이 생기면 재렌더링해주기 때문.\r\n    // 일반 변수라면 직접 스크립트로 변경해주어야 함.\r\n    // 변경 자주 되는 건 state, 변경 자주 안 되는 건 일반 변수에 저장 OK\r\n\r\n    // title[0] 과 같이 사용 가능 (array 넣었으니까)\r\n    let [title, setTitle] = useState([\"그림 추천\", \"여자 코트 추천\", \"강남 우동 맛집\", \"파이썬 독학\"]);\r\n    let [good, setGood] = useState([0, 2, 3, 45]);\r\n    let [modal, setModal] = useState(false);\r\n    let [modalTitle, setModalTitle] = useState(0);\r\n    let [inputData, setInputData] = useState(\"\");\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"black-nav\">\r\n                <div>{mainTitle}</div>\r\n            </div>\r\n\r\n            <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                    // 원본 보존이 필요할 수 있으니 copy 만들어서 state 변경\r\n\r\n                    // state가 기존과 같으면 변경하지 않음\r\n\r\n                    // array/object\r\n                    // let arr = [1,2,3] 이면 1,2,3을 저장하는 게 아니라 RAM에 저장된 위치 화살표만 저장(포인터?)\r\n\r\n                    // title[0] = \"어쩌고\" 하고 직접 넣어봤자 array를 수정한 것이고 변수의 화살표가 변경되지 않아서 state 갱신 X\r\n                    // let copy = title 하면 변수에 저장된 화살표만 저장되기 때문에... (같은가 하면 true 뜸)\r\n                    // 참고) reference data type\r\n                    // 화살표가 같아서 copy를 아무리 수정해도 state 안 변함\r\n\r\n                    // ... <- 기존 거 괄호를 벗겨주세요\r\n                    // [...title] <- 기존 title 괄호 벗겨서 다시 괄호에 넣음 <- 화살표 달라짐\r\n\r\n                    let copy = [...title];\r\n                    // 전문용어로 shallow copy라고 한다함\r\n                    // array/object일 경우 카피해서 수정\r\n                    copy[0] = \"정렬을 위한 어쩌고\";\r\n                    changeTitle(copy);\r\n                }}\r\n            >\r\n                타이틀 변경\r\n            </button>\r\n\r\n            <button type=\"button\" onClick={sortTitleList}>\r\n                정렬\r\n            </button>\r\n\r\n            {/* <div className=\"list\">\r\n                <h4>\r\n                    {title[0]} <span>👍</span>\r\n                    {good}\r\n                </h4>\r\n                <p>2월 17일 발행</p>\r\n                <button\r\n                    type=\"button\"\r\n                    onClick={() => {\r\n                        setGood(good + 1);\r\n                    }}\r\n                >\r\n                    굿 추가\r\n                </button>\r\n            </div>\r\n\r\n            <div className=\"list\">\r\n                <h4>{title[1]}</h4>\r\n                <p>2월 17일 발행</p>\r\n            </div>\r\n            <div className=\"list\">\r\n                <h4 onClick={() => setModal(!modal)}>{title[2]}</h4>\r\n                <p>2월 17일 발행</p>\r\n            </div> */}\r\n\r\n            {/* 반복문 map 이용, a는 해당 내용, i는 인덱스 */}\r\n            {title.map(function (a, i) {\r\n                return (\r\n                    // 유니크 키가 들어가야함. key={html마다 다른 숫자}\r\n                    <div className={\"list\" + \" \" + \"list\" + i} key={i}>\r\n                        {/* onClick에 함수 여러개 쓰려면 중괄호 써야함 안 쓰면 에러*/}\r\n                        <h4\r\n                            className=\"asd{i}\"\r\n                            onClick={() => {\r\n                                setModal(true);\r\n                                changeModal(i);\r\n                            }}\r\n                        >\r\n                            {i} : {title[i]}\r\n                            {/* 이벤트 버블링 막기. e.stopPropagation(); */}\r\n                            <span\r\n                                onClick={(e) => {\r\n                                    e.stopPropagation();\r\n                                    let copy = [...good];\r\n                                    copy[i]++;\r\n                                    setGood(copy);\r\n                                }}\r\n                                style={{ cursor: \"pointer\" }}\r\n                            >\r\n                                👍 {good[i]}\r\n                            </span>\r\n                        </h4>\r\n                        <p>2월 17일 발행</p>\r\n                        <button type=\"button\" onClick={() => delItem(i)}>\r\n                            삭제\r\n                        </button>\r\n                    </div>\r\n                );\r\n            })}\r\n\r\n            {/* 데이터 바인딩 */}\r\n            {/* <div className={classRed}>여기 변수는 {post}</div> */}\r\n            {/* 스타일은 중괄호 안에 묶어서 자료형 가능...\r\n                - 는 사용 불가하므로 대문자로 치환 (ex. font-size => fontSize ) */}\r\n            {/* <div style={{color: 'blue', fontSize: '3rem' }}>스타일 글씨</div> */}\r\n\r\n            {/* if문 사용할 수 없으므로 대신 삼항으로 사용 */}\r\n            {/* props로 함수도 넣을 수 있음 setTitle 등등 */}\r\n            {modal == true ? <Modal title={title} backgroundColor=\"yellow\" changeTitle={changeTitle} /> : null}\r\n\r\n            {/* input */}\r\n            {/* 이벤트핸들러 onChange, onScroll, onMouseOver, onClick... ... */}\r\n            {/* e (이벤트객체) => e.target, e.value ... */}\r\n            {/* state 변경보다 console.log가 먼저 실행되기 때문에 변경사항 반영 바로 안 됨 */}\r\n            <input\r\n                type=\"text\"\r\n                id=\"input_data\"\r\n                onChange={(e) => {\r\n                    setInputData(e.target.value);\r\n                    // console.log(inputData);\r\n                }}\r\n            />\r\n            <button type=\"button\" onClick={() => addItem()}>\r\n                등록\r\n            </button>\r\n\r\n            <Profile />\r\n        </div>\r\n    );\r\n\r\n    // 컴포넌트\r\n    // 1. 반복적인 html 축약\r\n    // 2. 큰 페이지들\r\n    // 3. 자주 변경되는 UI\r\n\r\n    // state => props로 전달\r\n    // props 전달은 부모 > 자식만 가능. (자식 > 부모, 자식 > 자식 props 전달은 불가)\r\n    function Modal(props) {\r\n        return (\r\n            // 하나의 태그로 시작해서 하나의 태그로 끝나야함\r\n            // 병렬해서 쓰려면 하나로 감싸기\r\n            // fragment <></>\r\n            <>\r\n                <div className=\"modal\" style={{ background: props.backgroundColor }}>\r\n                    <h4 className=\"modal-title\">{props.title[modalTitle]}</h4>\r\n                    <p>날짜</p>\r\n                    <p>상세내용</p>\r\n                    <button type=\"button\" onClick={() => props.changeTitle([\"123\", \"그림추천어쩌고\", \"어쩌고저쩌고\"])}>\r\n                        제목변경\r\n                    </button>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    // 이런식으로 만들 수도 있지만... (const 수정 못하는 걸 활용해서) 다만 선언이 위로 가야할듯.\r\n    // const Modal2 = () => {\r\n    //     return (\r\n    //         <div className=\"modal2\">\r\n    //             <h4>title</h4>\r\n    //             <p>날짜</p>\r\n    //             <p>상세내용</p>\r\n    //         </div>\r\n    //     );\r\n    // };\r\n\r\n    function addItem() {\r\n        if (inputData == \"\") {\r\n            inputData = \"데이터데이터\";\r\n        }\r\n\r\n        let tList = [inputData, ...title],\r\n            gList = [0, ...good];\r\n\r\n        setTitle(tList);\r\n        setGood(gList);\r\n\r\n        let inputText = document.getElementById(\"input_data\");\r\n        inputText.value = \"\";\r\n        inputText.focus();\r\n        setInputData(\"\");\r\n    }\r\n\r\n    function delItem(num) {\r\n        let tList = [...title],\r\n            gList = [...good];\r\n\r\n        tList.splice(num, 1);\r\n        gList.splice(num, 1);\r\n\r\n        setTitle(tList);\r\n        setGood(gList);\r\n    }\r\n\r\n    function changeModal(num) {\r\n        setModalTitle(num);\r\n    }\r\n\r\n    function changeTitle(title) {\r\n        setTitle(title);\r\n    }\r\n\r\n    function sortTitleList() {\r\n        let tList = [...title];\r\n        tList.sort();\r\n        setTitle(tList);\r\n    }\r\n}\r\n\r\n// 옛날버전 class 문법\r\nclass Profile extends React.Component {\r\n    constructor() {\r\n        super();\r\n\r\n        // state 위치\r\n        this.state = { name: \"Kim\", age: 30 };\r\n    }\r\n\r\n    // arrow func에 대해서는 하단 참조\r\n    // changeName() {\r\n    //     this.setState({ name: \"Lee\" });\r\n    // }\r\n    changeName = () => {\r\n        this.setState({ name: \"Lee\" });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div>프로필입니다</div>\r\n                {/* state 꺼내오려면 this.state.name 이라고 해야함 */}\r\n                <div>{this.state.name}입니다.</div>\r\n                {/* this.setState( {state명 : 이름}) */}\r\n                {/* 현재의 setName()은 대체하는 것. useState는 해당 부분만 변경 */}\r\n                <button\r\n                    type=\"button\"\r\n                    onClick={() => {\r\n                        this.setState({ name: \"Park\" });\r\n                    }}\r\n                >\r\n                    이름변경1\r\n                </button>\r\n                {/* 함수를 작성하고 싶은 경우 constructor 아래쪽에 함수로 작성 */}\r\n                <button\r\n                    type=\"button\"\r\n                    onClick={\r\n                        // 항상 this를 붙여야 함.\r\n                        // this.changeName() 하면 에러 안 나지만 this.changeName 하면 에러남.\r\n                        // 이 땐 changeName.bind(this) 해주거나, (함수가 changeName() {} 일 경우)\r\n                        // changeName을 arrow function으로 바꿔주면 this 자동으로 바인딩 되어서 해결~ (함수가 changeName = () => {} 일 경우)\r\n\r\n                        // this.changeName.bind(this)\r\n                        this.changeName\r\n                    }\r\n                >\r\n                    이름변경2\r\n                </button>\r\n\r\n                {this.state.name == \"Lee\" ? <div>Lee입니다</div> : <div>Lee가 아닙니다</div>}\r\n                {this.state.name == \"Park\" ? <div>Park입니다</div> : <div>Park가 아닙니다</div>}\r\n\r\n                <img src=\"/img/spring.jpg\" style={{width: \"300px\"}} />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n// build하고 배포하기\r\n\r\n// 브라우저는 html, css, js만 알아들을 수 있으므로 build 해서 배포해야함\r\n// 빌드하면 index.html  생성됨. 서버 api에서 build/index.html로 파일 전송~ 하면 끝\r\n// npm run build <- 명령어\r\n\r\n// http://URL/blog 처럼 하위에 작성할 경우\r\n// package.json 파일 object에 아래와 같이 추가\r\n// \"homepage\" : \"어쩌고저쩌고/blog\"\r\n\r\n// build할 때 압축시키고 싶지 않은 파일은 public 폴더 안에 넣기 \r\n// build 한 후에도 루트 경로에 파일이 남아있음. (이 경우 src에 ./가 아니라 /로 import해오면 됨)","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}